/* TEMPLATE OF PROGRAM TO OUTPUT ONE FILE OF
POSITIONS OF START OF EACH WORD FOR EACH CONDITION-ITEM
COMBINATION. PRODUCES A SINGLE NUMBER 0-59(or71),60(72)-119, ETC.,
FOR START OF EACH WORD, BY COMBINING X AND Y VALUE.
   COPY, COMBINE WITH YOUR CONDADJUSTMENT ROUTINES FROM
YOUR EXPERIMENT, ALTER THE DEFINES IF NEEDED, RENAME, AND COMPILE. */

/* 6/18/89 */
/* 11/15/89 Error with repeating condition numbers corrected */
/* 11/25/89 updated to allocate memory dynamically */


#include "pcexpt.h"
#define cond_adjust con_adjust
#define con_adj con_adjust
#define conadjust con_adjust

/* THE FOLLOWING DEFINES CAN BE TAILORED TO YOUR EXPERIMENT.
SET max_chars TO THE NUMBER OF CHARACTERS IN ONE ITEM
BEFORE YOU DO ANY SELECTION, AND max_regions TO THE MAXIMUM NUMBER OF ANALYSIS
REGIONS YOU HAVE. IF THE NUMBERS GET TOO BIG, YOU MAY NOT BE ABLE TO FIT
THE WHOLE EXPERIMENT INTO MEMORY. */

#define max_chars 6000		/* longest item, before any cleaning up */
#define max_regions 100		/* max number of anaysis regions */

void main(argc,argv)		/* OBLIGATORY STUFF */
int argc;
char *argv[];
{
int cond_adjust = 0;
char temp[20];
int last_few_conds[60];
FILE *countout,*printer;
char *tempitem;
int xyv;
int basepos;
char *xyp;
unsigned int xyc,xval;
int i,j,k;
int linelength;
int bSCON,eSCON;
int NCON;
int tCCOND;
char delim;
char string[80];
int hc;
int maxcond,mincond,absmaxcond,absmaxsen,maxcondno;
int mincondno,absminsen;
int *mat_tCCOND,*mat_CITEM,*mat_xyc;
char *mat_sen_ptr;
int *mat_pos;
char *mat_sen;

printf("\n\nNOTE: THIS VERSION IS SET FOR A MAXIMUM OF %d CHARACTERS\nAND %d ANALYSIS REGIONS IN A DISPLAY;\nREVISE THE #DEFINES TO CHANGE THEM IF YOU RUN OUT\nOF MEMORY ALLOCATION SPACE!\n",max_chars,max_regions);
bSCON = input("\nWhat is lowest subject-counterbalancing condition? ");
eSCON = input("What is highest subject-counterbalancing condition? ");
absmaxcond = eSCON-bSCON+1;
mincondno = input("What is the smallest experimental condition number? ");
maxcondno = input("What is the largest experimental condition number? ");
absminsen = input("What is the smallest experimental sentence number?");
absmaxsen = input("What is the largest experimental sentence number? ");
printf("\nWhat is delimiter character? (space includes end of line): ");
gets(string);
delim=string[0];
printf("Do you want hard copy output of sentences? y or n");
gets(string);
hc = tolower(string[0]) == 'y' ? 1 : 0;
if(hc)
	{
	printf("\nTrying to open printer");
	printer = fopen("prn","w");
	}
linelength = input("\nWhat is line length? 60 or 72 or 80: ");
printf("Type name of position count output file: ");
do
	{
	countout = fopen(gets(temp),"w");
	if(countout == NULL)
		printf("\nNOPE, try again: ");
	}
while(countout == NULL);
printf("\nIndicate '1' when asked for subject-condition value.");
printf("\nIndicate that you want no data output file.");
argc = initialize(argc,argv,VIDEO_CARD);	/* OBLIGATORY STUFF */

if((tempitem = calloc(max_chars,1)) == NULL)
	{
	printf("\nCan't calloc memory for tempitem");
	exit(1);
	}
if((mat_tCCOND = (int *) calloc(absmaxcond,sizeof(int))) == NULL)
	{
	printf("\nCan't calloc memory for mat_tCCOND");
	exit(1);
	}
if((mat_CITEM = (int *)calloc(absmaxcond,sizeof(int))) == NULL)
	{
	printf("\nCan't calloc memory for mat_CITEM");
	exit(1);
	}
if((mat_xyc = (int *)calloc(absmaxcond,sizeof(int))) == NULL)
	{
	printf("\nCan't calloc memory for mat_xyc");
	exit(1);
	}
if((mat_pos = (int *)calloc(absmaxcond,max_regions * sizeof(int))) == NULL)
	{
	printf("\nCan't calloc memory for mat_pos");
	exit(1);
	}
if((mat_sen = calloc(absmaxcond,max_chars)) == NULL)
	{
	printf("\nCan't calloc memory for mat_sen");
	exit(1);
	}
printf("\nSuccessfully calloc'd space.");



while(CTRIAL < NITEMS)
	{
	for(i=0;i<eSCON-bSCON;i++)
		last_few_conds[i] = 6789;		/* silly number */
	maxcond = 0;
	mincond = 6789;
	strcpy(tempitem,trials[0][order[CTRIAL]].dptr);	/* save current sentence */
	for(SCON=bSCON,NCON=bSCON;SCON <= eSCON;SCON++)	
		{				
		strcpy(trials[0][order[CTRIAL]].dptr,tempitem);	/* restore it */
		if (CCOND >= mincondno && CCOND <= maxcondno && CITEM >= absminsen && CITEM <= absmaxsen)		/* an experimental item */
/* PROG START */ {
										/* YOUR PROGRAM STARTS HERE */
										/* NOTE: DO NOT!!! INCLUDE STATEMENT */
										/* THAT INCREMENTS CCOND */






										/* END OF YOUR PROGRAM HERE */
/* PROG END */	}
		if (CCOND >= mincondno && CCOND <= maxcondno && CITEM >= absminsen && CITEM <= absmaxsen)		/* an experimental item */
												/* not for questions */
			{
			tCCOND = CCOND+cond_adjust;
			if(tCCOND < mincond)
				mincond = tCCOND;
			if(tCCOND > maxcond)
				maxcond = tCCOND;
			if(SCON != bSCON)			/* not the first trial for an item */
/*				for(i=0;i<eSCON-bSCON;i++)*/
				for(i=0;i<NCON-bSCON;i++)
					if(tCCOND == last_few_conds[i])
						goto done_already;
			mat_sen_ptr = mat_sen+((NCON-bSCON)*max_chars);
/*			for(i=eSCON-bSCON+1;i>0;i--)*/
			for(i=NCON-bSCON+1;i>0;i--)
				last_few_conds[i] = last_few_conds[i-1];
			last_few_conds[0] = tCCOND;
			if(hc)
				{
				sprintf(mat_sen_ptr,"\nCITEM %5d tCCOND %5d\n",CITEM,tCCOND);
				mat_sen_ptr+=26;
				}
			basepos = 0;
			*(mat_pos+((NCON-bSCON)*max_regions)) = 0;		/* assume start in first column */
			for(xyp=trials[0][order[CTRIAL]].dptr,xyc=1,xval=0;*xyp != '\0';xyp++,xval++)
				{
				while(xval==0 && (*xyp == '\n' || *xyp == LF || *xyp == CR))
					xyp++;			/* skip leading new lines */
				if(hc)
					{
					*(mat_sen_ptr++) = *xyp;
					}
				if(*xyp == delim || (delim == ' ' && (*xyp == '\n' || *xyp == LF)))
					{
					*(mat_pos+((NCON-bSCON)*max_regions)+(xyc++)) = xval;
					if(hc)
						{
						sprintf(mat_sen_ptr,"%3d ",xval);
						mat_sen_ptr+=4;
						}
					if(delim != ' ')
						xval--;			/* don't count non-space delimiter in */
											/* character count */
					}
				if(*xyp == '\n' || *xyp == LF)
					{
					basepos += linelength;		/* next line */
					xval=basepos-1;		/* 1 before start of line; will increase */
					}
				else if(*xyp == CR)
					xval--;			/* throw away CRs */
				}
			if(hc)
				*mat_sen_ptr = '\0';
			*(mat_CITEM + (NCON-bSCON)) = CITEM;
			*(mat_tCCOND + (NCON-bSCON)) = tCCOND;
			*(mat_xyc + (NCON-bSCON)) = xyc;
			NCON++;			/* count good conditions */
			}
		done_already: ;
		}
							/* now write it all in order */

	for(i=mincond;i<=maxcond;i++)
		{
		for(j=0;j<=maxcond-mincond;j++)
			{
			if(*(mat_tCCOND +j) == i)		/* found the pointer to the next cond */
				{
				if(hc)
					{
					mat_sen_ptr = mat_sen;
					fprintf(printer,"%s",(mat_sen_ptr+(j*max_chars)));
					}
				fprintf(countout,"%5u%5u%5u",*(mat_CITEM+j),*(mat_tCCOND+j),*(mat_xyc+j));
				for(k=0;k<*(mat_xyc+j);k++)
					fprintf(countout,"%5d",*(mat_pos+(j*max_regions)+(k)));
				fprintf(countout,"\n");
				}
			}
		}
	
						
	CTRIAL++;				/* GO ON TO NEXT ITEM */
	printf("\nTrial %d",CTRIAL);
	}
fclose(countout);
if(hc)
	fclose(printer);
free(mat_sen);
free(mat_pos);
free(mat_xyc);
free(mat_CITEM);
free(mat_tCCOND);
}

long specialevent()
{
return(1);
}
