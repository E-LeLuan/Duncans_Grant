/*
SPLANAL.TEM, VERSION 11/12/98
FOR SELF PACED LISTENING

SELFPACE.TEM, VERSION 6/20/92
REVISED 8/95

TEMPLATE OF PROGRAM TO OUTPUT A FILE OF POSITIONS OF THE
_START_ OF EACH ANALYSIS REGION FOR EACH CONDITION-ITEM COMBINATION
IN A SELF-PACED READING EXPERIMENT FROM REGION 2 ON, AS WELL AS THE LENGTHS
OF EACH PRESENTATION REGION.

ANALYSIS REGION POSITIONS:

PRODUCES A SINGLE NUMBER FOR THE START OF EACH REGION EXCEPT FOR THE VERY FIRST.
THE NUMBER IS THE START, IN PRESENTATION SEGMENTS, OF EACH ANALYSIS REGION
STARTING WITH ANALYSIS REGION 2 AND GOING TO THE LAST ANALYSIS REGION. 

THE ARRAY FOR A GIVEN CONDITION-ITEM COMBINATION STARTS WITH THE # OF
ANALYISIS REGIONS:

    ITEM#   COND#  #ANALYSIS SEGMENTS START OF 2ND SEGMENT ... START OF NTH SEGMENT #PRESENTATION SEGMENTS	#CHARS IN PS1	#CHARS IN PS2...#CHARS IN PSN

PRESENTATION REGION LENGTHS:

THIS ARRAY CONTINUES WITH THE NUMBER OF PRESENTATION REGIONS (INCLUDING THE
PREVIEW OF UNDERLINES) AND THE DURATION IN MS OF EACH PRESENTATION REGION.
	
HOW TO USE:

COPY, COMBINE WITH YOUR CONDADJUSTMENT ROUTINES FROM
YOUR EXPERIMENT, RENAME AS A .C FILE, CHECK THE VALUE OF
SamplesPerMs. AND COMPILE. 

TO USE, MAKE A COPY OF THE DURATION LINES FROM YOUR SENTENCE FILE
WITH AN ANALYSIS DELIMITER _AFTER_ EACH REGION OF
INTEREST (INCLUDING THE VERY LAST REGION).

*/

/* 6/5/88 wordpos program */
/* 2/20/89 */
/* 11/15/89 */
/* 5/13/91 */
/* 6/19/92 ms/char stuff added */
/* 8/6/95 checked for handling CRs in counting region lengths */
/* 11/13/98 modified for self paced listening */

#include "pcexpt.h"
#define con_adjust cond_adjust
#define ca cond_adjust
#define SamplesPerMs 22.05			/* samples per ms; change as needed */
int count_presentation_regions(char adelim,int NCON,int bSCON, int hc, int *segdur, int *npres);
int measure_presentation_regions(int NCON,int bSCON, int *segdur, int *npres);
void allocate_matrix_space(int absmaxcond);
void write_it_out(int mincond, int maxcond, int hc);
int *mat_tCCOND,*mat_CITEM,*mat_anal_regions_count,*mat_anal_regions;
int *mat_pres_regions_count, *mat_pres_regions;
char *matp, *mat_sen;
FILE *countout,*printer;


void main(argc,argv)		/* OBLIGATORY STUFF */
int argc;
char *argv[];
{
int cond_adjust,qconadj;
char tempitem[1000];
char string[80];
char temp[20];
int last_few_conds[48];
char *xyp;
char adelim;
int xyv,regions_count,pres_count,xval,yval;
int i,j,k;
int linelength;
int bSCON,eSCON,NCON;
int tCCOND;
int hc;
int maxcond,mincond,absmaxcond,absmaxsen,maxcondno;
int segdur[80];						/* vector of durations of pres. segments */
int npres;								/* number of presentation regions */
printf("\nVERSION OF 11/13/98, SELF PACE LISTENING .CNT FILE GENERATOR\n");
bSCON = input("\nWhat is lowest subject-counterbalancing condition? ");
eSCON = input("What is highest subject-counterbalancing condition? ");
absmaxcond = eSCON - bSCON + 1;
maxcondno = input("What is the largest experimental condition number? ");
absmaxsen = input("What is the largest experimental sentence number? ");
printf("What is analysis delimiter? ");
gets(string);
adelim=string[0];
printf("Do you want hard copy output of durations? y or n");
gets(string);
hc = tolower(string[0]) == 'y' ? 1 : 0;
if(hc)
	printer = fopen("prn","w");
printf("\nType name of position count output file: ");
do
	{
	countout = fopen(gets(temp),"w");
	if(countout == NULL)
		printf("\nNOPE, try again: ");
}
while(countout == NULL);
printf("\n\n                     ***NOTE:***\nINDICATE '1' WHEN ASKED FOR GROUP (counterbalancing condition) VALUE;");
printf("\nINDICATE THAT YOU WANT NO DATA OUTPUT FILE.\n                     ***********\n\n");
argc = initialize(argc,argv,VIDEO_CARD);	/* OBLIGATORY STUFF */

allocate_matrix_space(absmaxcond);

cond_adjust = 0;
while(CTRIAL < NITEMS)
	{
	for(i=0;i<48;i++)
		last_few_conds[i] = 6789;		/* silly number */
	maxcond = 0;
	mincond = 6789;
	strcpy(tempitem,trials[0][order[CTRIAL]].dptr);	/* save current sentence */
	for(SCON=bSCON,NCON=bSCON;SCON <= eSCON;SCON++)	
		{				
		strcpy(trials[0][order[CTRIAL]].dptr,tempitem);	/* restore it */
		if (CCOND <= maxcondno && CITEM <= absmaxsen)		/* an experimental item */
			{
			/* YOUR PROGRAM STARTS HERE */
			/* NOTE: DO _NOT_ INCLUDE STATEMENT THAT INCREMENTS CCOND */
			/* NOR ANY STATEMENTS THAT DISPLAY TEXT TO THE SUBJECT */





			/* END OF YOUR PROGRAM HERE */
			}
		if(CCOND <= maxcondno && CITEM <= absmaxsen)			/* not for questions */
			{
			tCCOND = CCOND+cond_adjust;
			if(tCCOND < mincond)
				mincond = tCCOND;
			if(tCCOND > maxcond)
				maxcond = tCCOND;
			if(SCON != bSCON)			/* not the first trial for an item */
				for(i=0;i<=eSCON-bSCON;i++)
					if(tCCOND == last_few_conds[i])
						{
						goto done_already;
						}
			matp = mat_sen + ((NCON-bSCON) * 1000);		/* pointer to sentence */
			for(i=eSCON-bSCON+1;i>0;i--)
				last_few_conds[i] = last_few_conds[i-1];
			last_few_conds[0] = tCCOND;
			if(hc)
				{
				sprintf(matp,"\nCITEM %5d tCCOND %5d\n",CITEM,tCCOND);
				matp+=26;
				}
			*(mat_CITEM + (NCON-bSCON)) = CITEM;
			*(mat_tCCOND + (NCON-bSCON)) = tCCOND;

			regions_count = count_presentation_regions(adelim,NCON,bSCON,hc,segdur,&npres);
			pres_count = measure_presentation_regions(NCON,bSCON,segdur,&npres);
			if(hc)
				*matp = '\0';
			*(mat_anal_regions_count + (NCON-bSCON)) = regions_count;
			*(mat_pres_regions_count + (NCON-bSCON)) = pres_count;
			NCON++;			/* next real and different condition */
			}
		done_already:;
		}
							/* now write it all in order */
	write_it_out(mincond,maxcond,hc);
	CTRIAL++;				/* GO ON TO NEXT ITEM */
	printf("\nTrial %d",CTRIAL);
	}
fclose(countout);
if(hc)
	fclose(printer);
free(mat_sen);
free(mat_anal_regions);
free(mat_anal_regions_count);
free(mat_CITEM);
free(mat_tCCOND);
}


int count_presentation_regions(char adelim,int NCON,int bSCON, int hc, int *segdur,int *npres)
{
int xyc,xval,i;
char *xyp;
char dbuff[80];
char *dbuffp;
/*printf("\ndptr %s",trials[0][order[CTRIAL]].dptr);*/
for(xyp=trials[0][order[CTRIAL]].dptr,xyc=0,xval=1;*xyp != '\0';)
	{
	if(hc)
		{
		*matp++ = *xyp;
		}
	while(!isdigit(*xyp))
		xyp++;
	dbuffp = dbuff;
	while(isdigit(*xyp))
		*(dbuffp++) = *(xyp++);
	*(dbuffp) = '\0';
	*npres = atoi(dbuff);			/* read number of pres regions */
/*printf("\nTrial %d, in count_presentation_regions, npres = %d",CTRIAL,*npres);*/
	segdur[0] = 0;
	for(i=0;i < *npres;i++)
		{
		dbuffp = dbuff;
		while(!isdigit(*xyp))
			xyp++;
		while(isdigit(*xyp))
			*(dbuffp++) = *(xyp++);
		*(dbuffp) = '\0';
		xval++;	/* found presentation segment end */
		segdur[i+1] = (int)((atof(dbuff))/SamplesPerMs);
		if(*xyp == adelim)
			*(mat_anal_regions + ((NCON-bSCON) * 500) + xyc++) = xval;
		if(isspace(*xyp) || *xyp == adelim)
			while(isspace(*xyp) || *xyp == adelim)
				xyp++;
		if(hc)
			{
			sprintf(matp,"%3d ",xyc+1);
			matp+=4;
			}
/*printf("\n     segdur[%d+1] %d",i,segdur[i+1]);
delay(300);*/
		}
	}
return(xyc);	
}


int measure_presentation_regions(int NCON,int bSCON, int *segdur, int *npres)
{
int letctr, i;
for(i=0;i < *npres;i++)
	{
	*(mat_pres_regions + ((NCON-bSCON) * 500) + i) = segdur[i+1]-segdur[i];
	}
return(*npres);
}



void write_it_out(int mincond, int maxcond, int hc)
{
int i,j,k;
for(i=mincond;i<=maxcond;i++)
	{
	for(j=0;j<=maxcond-mincond;j++)
		{
		if(*(mat_tCCOND + j) == i)		/* found the pointer to the next cond */
			{
			if(hc)
				{
				matp = mat_sen + j*1000;
				fprintf(printer,"%s",matp);
				}
			fprintf(countout,"%5d%5d",*(mat_CITEM + j), *(mat_tCCOND + j));
			fprintf(countout,"%5d",*(mat_anal_regions_count + j));
			for(k=0;k< (*(mat_anal_regions_count + j) -1);k++)
				fprintf(countout,"%5d",*(mat_anal_regions + j*500 + k));
			fprintf(countout,"%5d",*(mat_pres_regions_count + j));
			for(k=0;k< *(mat_pres_regions_count + j);k++)
				fprintf(countout,"%5d",*(mat_pres_regions + j*500 + k));
			fprintf(countout,"\n");
			}
		}
	}
}	


void allocate_matrix_space(int absmaxcond)
{
if((mat_tCCOND = (int *) calloc(absmaxcond,sizeof(int))) == NULL)
	{
	printf("\nCan't calloc memory for mat_tCCOND");
	exit(1);
	}
if((mat_CITEM = (int *)calloc(absmaxcond,sizeof(int))) == NULL)
	{
	printf("\nCan't calloc memory for mat_CITEM");
	exit(1);
	}
if((mat_anal_regions_count = (int *)calloc(absmaxcond,sizeof(int))) == NULL)
	{
	printf("\nCan't calloc memory for mat_anal_regions_count");
	exit(1);
	}
if((mat_pres_regions_count = (int *)calloc(absmaxcond,sizeof(int))) == NULL)
	{
	printf("\nCan't calloc memory for mat_pres_regions_count");
	exit(1);
	}
if((mat_anal_regions = (int *)calloc(absmaxcond,500 * sizeof(int))) == NULL)
	{
	printf("\nCan't calloc memory for mat_anal_regions");
	exit(1);
	}
if((mat_pres_regions = (int *)calloc(absmaxcond,500 * sizeof(int))) == NULL)
	{
	printf("\nCan't calloc memory for mat_pres_regions");
	exit(1);
	}
if((mat_sen = calloc(absmaxcond,1000)) == NULL)
	{
	printf("\nCan't calloc memory for mat_sen");
	exit(1);
	}
printf("\nSuccessfully calloc'd space.");
}



/* replace these with your own function if you need one */

long specialevent(unsigned dur)
{
return((long)(dur));		/* clear nonsense */
}

long extra_specialevent(unsigned dur,int y,int x,int t_s,int position)
{
return((long)(dur*y*x*t_s*position));
}
