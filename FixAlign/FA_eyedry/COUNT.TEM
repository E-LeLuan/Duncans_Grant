/* TEMPLATE FOR PHRASE LENGTH COUNTING PROGRAM */
/* INSERT THE GUTS OF YOUR EXPERIMENT RUNNING PROGRAM WHERE INDICATED*/
/* 1/91 */
#include "pcexpt.h"
#define condadjust ca
#define cond_adjust ca
#define cadjust ca
#define conadj ca
#define con_adjust ca

void main(argc,argv)		/* OBLIGATORY STUFF */
int argc;
char *argv[];

{
char vr;
char temp[80];
int ca;
int fitem,litem,fcond,lcond;
int items_per_line = 1;	/* SET TO HOW MANY ITEMS YOU WANT ON ONE DATA LINE */
int items_per_trial = 2;	/* SET TO HOW MANY ITEMS STAY TOGETHER AS 1 TRIAL */
printf("\nINDICATE SENTENCE FILE ACUTUALLY USED IN EXPERIMENT WHEN ASKED FOR INPUT");
printf("\nAND INDICATE DESIRED OUTPUT (.CHR) FILE WHEN ASKED FOR OUTPUT.");
argc = initialize(argc,argv,VIDEO_CARD);	/* OBLIGATORY STUFF */

printf("\nWhat is presentation separator character? ");
gets(temp);
vr = temp[0];
fitem = input("\nWhat is lowest numbered item to examine? ");
litem = input("\nWhat is highest numbered item to examine? ");
fcond = input("\nWhat is lowest numbered cond to examine? ");
lcond = input("\nWhat is highest numbered cond to examine? ");

while(CTRIAL < NITEMS)
	{				/* START OF YOUR MAIN PROGRAM HERE */

/********* your code WITHOUT THE DISPLAY starts here *******************/







/********** your code WITHOUT THE DISPLAY PORTION ends here *****************/

	CCOND += ca;
					/* the following replaces the actual */
					/* display portion of your program */
	if(CITEM >= fitem && CITEM <= litem && CCOND >= fcond && CCOND <=
lcond)
	     countletters(vr);
	else
		CTRIAL++;
     printf("\nPASSAGE %d",trials[0][order[ctrial-1]].item);
	}

printf("\n*********************EXPERIMENT OVER************************");

if(argc == 3)			/* OBLIGATORY */
	{
	savedat(items_per_line);
	clear();
	exit(1);
	}				/* END OF YOUR MAIN PROGRAM HERE */
}


					/* PUT ANY SUBROUTINES HERE */



							/*********************/


countletters(separator)	/* count letters per segment */
char separator;
{
unsigned selfpaced[400];
char c;
int dcnt, k, letctr;
unsigned *storeptr;
char *tptr;

charcount[0] = 0;
specialflag = 0;
tptr = trials[0][order[ctrial]].dptr;
dcnt = 0;
letctr = 0;

while ((c = *tptr) == '\n')
	tptr++;	
while ((c = *tptr++) != '\0' && c != CPMEOF)
{
	printf("%c", c);
	if(c EQ separator || c EQ '$') /* || c EQ CR)*/	/* you may want to */
									/* allow CRs */
	{
		selfpaced[dcnt++] = letctr;
		printf(" dcnt,letctr = %d,%d ",dcnt,letctr);
		letctr = 0;
	}
	else
		if (!isspace(c))
			++letctr;
}
	if(c EQ CPMEOF)
		exit(1);		/* panic! */
	else
	{
		if((trials[0][order[ctrial]].spptr = (storeptr =(unsigned *)(calloc(dcnt,2)))) EQ 0)
			{
			printf("\nout of memory space for selfpace data");
			printf("\nDCNT = %d",dcnt);
			exit(1);
			}
		for(k = 0; k < dcnt; k++)
			*(storeptr++) = selfpaced[k];
		trials[0][order[ctrial]].spnum = dcnt;
		(*storfn)(0,0,0);		/* store zeros in normal data */
	}
}



long specialevent()
{
		/* PUT STUFF HERE THAT HAPPENS AT SPECIALEVENT */
}

