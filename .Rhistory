filter(count == 0) %>%
select(file) %>%
write_csv(path = 'FA_filenames_corr.csv', col_names = FALSE)
# problematic trials
FA_detect_script_error %>%
filter(count > 0) %>%
select(file) %>%
write_csv(path = 'FA_filenames_error.csv', col_names = FALSE)
# files with no error in script (correct)
# read in data
FA_filenames_corr <- read_csv('FA_filenames_corr.csv', col_names = FALSE) #54 obs. 20 20 14
# assign batch numbers
batch_numbers_FA_corr <- c(rep("batch1", 20),
rep("batch2", 20),
rep("batch3", 14))
# add batch numbers as a column
FA_filenames_corr <- FA_filenames_corr %>%
cbind(batch_numbers_FA_corr)
# write separate .csv files
FA_filenames_corr %>%
filter(batch_numbers_FA_corr == "batch1") %>%
select(X1) %>%
write_csv(path = 'FA_batch1_corr.csv', col_names = FALSE)
#FA_filenames_corr %>%
filter(batch_numbers_FA_corr == "batch2") %>%
select(X1) %>%
write_csv(path = 'FA_batch2_corr.csv', col_names = FALSE)
#FA_filenames_corr %>%
FA_filenames_corr %>%
filter(batch_numbers_FA_corr == "batch2") %>%
select(X1) %>%
write_csv(path = 'FA_batch2_corr.csv', col_names = FALSE)
#FA_filenames_corr %>%
filter(batch_numbers_FA_corr == "batch3") %>%
select(X1) %>%
write_csv(path = 'FA_batch3_corr.csv', col_names = FALSE)
library(tidyverse)
# FA Processing
# read in the data
# separate the columns into file and count
FA_detect_script_error <- read_csv('detect_script_error.csv', col_names = FALSE) %>%
separate(col = X1, sep = ":", into = c("file", "count"))
# replace asc with DA1 - this is what .lst needs
FA_detect_script_error$file <- str_replace(string = FA_detect_script_error$file,
pattern = "asc",
replacement = "DA1")
# non-problematic trials
FA_detect_script_error %>%
filter(count == 0) %>%
select(file) %>%
write_csv(path = 'FA_filenames_corr.csv', col_names = FALSE)
# problematic trials
FA_detect_script_error %>%
filter(count > 0) %>%
select(file) %>%
write_csv(path = 'FA_filenames_error.csv', col_names = FALSE)
# files with no error in script (correct)
# read in data
FA_filenames_corr <- read_csv('FA_filenames_corr.csv', col_names = FALSE) #54 obs. 20 20 14
# assign batch numbers
batch_numbers_FA_corr <- c(rep("batch1", 20),
rep("batch2", 20),
rep("batch3", 14))
# add batch numbers as a column
FA_filenames_corr <- FA_filenames_corr %>%
cbind(batch_numbers_FA_corr)
# write separate .csv files
FA_filenames_corr %>%
filter(batch_numbers_FA_corr == "batch1") %>%
select(X1) %>%
write_csv(path = 'FA_batch1_corr.csv', col_names = FALSE)
FA_filenames_corr %>%
filter(batch_numbers_FA_corr == "batch2") %>%
select(X1) %>%
write_csv(path = 'FA_batch2_corr.csv', col_names = FALSE)
FA_filenames_corr %>%
filter(batch_numbers_FA_corr == "batch3") %>%
select(X1) %>%
write_csv(path = 'FA_batch3_corr.csv', col_names = FALSE)
# files with error in script
#read in data
FA_filenames_error <- read_csv('FA_filenames_error.csv', col_names = FALSE) #36 obs. 20 16
# assign batch numbers
batch_numbers_FA_error <- c(rep("batch4", 20),
rep("batch5", 16))
# add batch numbers as a column
FA_filenames_error <- FA_filenames_error %>%
cbind(batch_numbers_FA_error)
# add batch numbers as a column
FA_filenames_error <- FA_filenames_error %>%
cbind(batch_numbers_FA_error)
# write separate csv files
FA_filenames_error %>%
filter(batch_numbers_FA_error == "batch4") %>%
select(X1) %>%
#write_csv(path = 'FA_batch4_error.csv', col_names = FALSE)
#FA_filenames_error %>%
filter(batch_numbers_FA_error == "batch5") %>%
select(X1) %>%
write_csv(path = 'FA_batch5_error.csv', col_names = FALSE)
# FA Processing
# read in the data
# separate the columns into file and count
FA_detect_script_error <- read_csv('detect_script_error.csv', col_names = FALSE) %>%
separate(col = X1, sep = ":", into = c("file", "count"))
# replace asc with DA1 - this is what .lst needs
FA_detect_script_error$file <- str_replace(string = FA_detect_script_error$file,
pattern = "asc",
replacement = "DA1")
# non-problematic trials
FA_detect_script_error %>%
filter(count == 0) %>%
select(file) %>%
write_csv(path = 'FA_filenames_corr.csv', col_names = FALSE)
# problematic trials
FA_detect_script_error %>%
filter(count > 0) %>%
select(file) %>%
write_csv(path = 'FA_filenames_error.csv', col_names = FALSE)
# files with no error in script (correct)
# read in data
FA_filenames_corr <- read_csv('FA_filenames_corr.csv', col_names = FALSE) #54 obs. 20 20 14
# assign batch numbers
batch_numbers_FA_corr <- c(rep("batch1", 20),
rep("batch2", 20),
rep("batch3", 14))
# add batch numbers as a column
FA_filenames_corr <- FA_filenames_corr %>%
cbind(batch_numbers_FA_corr)
# write separate .csv files
FA_filenames_corr %>%
filter(batch_numbers_FA_corr == "batch1") %>%
select(X1) %>%
write_csv(path = 'FA_batch1_corr.csv', col_names = FALSE)
FA_filenames_corr %>%
filter(batch_numbers_FA_corr == "batch2") %>%
select(X1) %>%
write_csv(path = 'FA_batch2_corr.csv', col_names = FALSE)
FA_filenames_corr %>%
filter(batch_numbers_FA_corr == "batch3") %>%
select(X1) %>%
write_csv(path = 'FA_batch3_corr.csv', col_names = FALSE)
# files with error in script
#read in data
FA_filenames_error <- read_csv('FA_filenames_error.csv', col_names = FALSE) #36 obs. 20 16
# assign batch numbers
batch_numbers_FA_error <- c(rep("batch4", 20),
rep("batch5", 16))
# add batch numbers as a column
FA_filenames_error <- FA_filenames_error %>%
cbind(batch_numbers_FA_error)
# assign batch numbers
batch_numbers_FA_error <- c(rep("batch4", 20),
rep("batch5", 11))
# add batch numbers as a column
FA_filenames_error <- FA_filenames_error %>%
cbind(batch_numbers_FA_error)
# write separate csv files
FA_filenames_error %>%
filter(batch_numbers_FA_error == "batch4") %>%
select(X1) %>%
#write_csv(path = 'FA_batch4_error.csv', col_names = FALSE)
#FA_filenames_error %>%
filter(batch_numbers_FA_error == "batch5") %>%
select(X1) %>%
write_csv(path = 'FA_batch5_error.csv', col_names = FALSE)
# write separate csv files
FA_filenames_error %>%
filter(batch_numbers_FA_error == "batch4") %>%
select(X1) %>%
write_csv(path = 'FA_batch4_error.csv', col_names = FALSE)
FA_filenames_error %>%
filter(batch_numbers_FA_error == "batch5") %>%
select(X1) %>%
write_csv(path = 'FA_batch5_error.csv', col_names = FALSE)
# first create a csv file
write.csv(DA1_files)
# first create a csv file
write.list(DA1_files)
# first create a csv file
file.rename('w_DBP01_fa.da1', 'DBP01_fa.da1')
# first create a csv file
da1_files %>% file.rename('w_DBP01_fa.da1', 'DBP01_fa.da1')
# first create a csv file
da1_files %<% file.rename('w_DBP01_fa.da1', 'DBP01_fa.da1')
# FA Processing
# read in the data
# separate the columns into file and count
FA_detect_script_error <- read_csv('detect_script_error_asc.csv', col_names = FALSE) %>%
separate(col = X1, sep = ":", into = c("file", "count"))
library(tidyverse)
# FA Processing
# read in the data
# separate the columns into file and count
FA_detect_script_error <- read_csv('detect_script_error_asc.csv', col_names = FALSE) %>%
separate(col = X1, sep = ":", into = c("file", "count"))
library(readr)
detect_script_error_asc <- read_csv("FixAlign/FA_asc_files/detect_script_error_asc.csv")
View(detect_script_error_asc)
FA_detect_script_error <- read_csv("FixAlign/FA_asc_files/detect_script_error_asc.csv", col_names = FALSE) %>%
separate(col = X1, sep = ":", into = c("file", "count"))
# replace asc with DA1 - this is what .lst needs
FA_detect_script_error$file <- str_replace(string = FA_detect_script_error$file,
pattern = "asc",
replacement = "DA1")
# non-problematic trials
FA_detect_script_error %>%
filter(count == 0) %>%
select(file) %>%
write_csv(path = 'FA_filenames_corr.csv', col_names = FALSE)
# problematic trials
FA_detect_script_error %>%
filter(count > 0) %>%
select(file) %>%
write_csv(path = 'FA_filenames_error.csv', col_names = FALSE)
# files with no error in script (correct)
# read in data
FA_filenames_corr <- read_csv('FA_filenames_corr.csv', col_names = FALSE)
# assign batch numbers
batch_numbers_FA_corr <- c(rep("batch1", 20),
rep("batch2", 20),
rep("batch3", 14))
# add batch numbers as a column
FA_filenames_corr <- FA_filenames_corr %>%
cbind(batch_numbers_FA_corr)
# write separate .csv files
FA_filenames_corr %>%
filter(batch_numbers_FA_corr == "batch1") %>%
select(X1) %>%
write_csv(path = 'FA_batch1_corr.csv', col_names = FALSE)
FA_filenames_corr %>%
filter(batch_numbers_FA_corr == "batch2") %>%
select(X1) %>%
write_csv(path = 'FA_batch2_corr.csv', col_names = FALSE)
FA_filenames_corr %>%
filter(batch_numbers_FA_corr == "batch3") %>%
select(X1) %>%
write_csv(path = 'FA_batch3_corr.csv', col_names = FALSE)
# files with error in script
#read in data
FA_filenames_error <- read_csv('FA_filenames_error.csv', col_names = FALSE)
# assign batch numbers
batch_numbers_FA_error <- c(rep("batch4", 20),
rep("batch5", 11))
# add batch numbers as a column
FA_filenames_error <- FA_filenames_error %>%
cbind(batch_numbers_FA_error)
# write separate csv files
FA_filenames_error %>%
filter(batch_numbers_FA_error == "batch4") %>%
select(X1) %>%
write_csv(path = 'FA_batch4_error.csv', col_names = FALSE)
# separate the columns into file and count
FA_detect_script_error <- read_csv("FixAlign/FA_asc_files/detect_script_error_asc.csv", col_names = FALSE) %>%
separate(col = X1, sep = ":", into = c("file", "count"))
# replace asc with DA1 - this is what .lst needs
FA_detect_script_error$file <- str_replace(string = FA_detect_script_error$file,
pattern = "asc",
replacement = "DA1")
# non-problematic trials
FA_detect_script_error %>%
filter(count == 0) %>%
select(file) %>%
write_csv(path = 'FA_filenames_corr.csv', col_names = FALSE)
# problematic trials
FA_detect_script_error %>%
filter(count > 0) %>%
select(file) %>%
write_csv(path = 'FA_filenames_error.csv', col_names = FALSE)
# files with no error in script (correct)
# read in data
FA_filenames_corr <- read_csv('FA_filenames_corr.csv', col_names = FALSE)
# assign batch numbers
batch_numbers_FA_corr <- c(rep("batch1", 20),
rep("batch2", 20),
rep("batch3", 14))
# add batch numbers as a column
FA_filenames_corr <- FA_filenames_corr %>%
cbind(batch_numbers_FA_corr)
# files with no error in script (correct)
# read in data
FA_filenames_corr <- read_csv('FA_filenames_corr.csv', col_names = FALSE)
# assign batch numbers
batch_numbers_FA_corr <- c(rep("batch1", 15),
rep("batch2", 15),
rep("batch3", 11))
# add batch numbers as a column
FA_filenames_corr <- FA_filenames_corr %>%
cbind(batch_numbers_FA_corr)
# write separate .csv files
FA_filenames_corr %>%
filter(batch_numbers_FA_corr == "batch1") %>%
select(X1) %>%
write_csv(path = 'FA_batch1_corr.csv', col_names = FALSE)
FA_filenames_corr %>%
filter(batch_numbers_FA_corr == "batch2") %>%
select(X1) %>%
write_csv(path = 'FA_batch2_corr.csv', col_names = FALSE)
FA_filenames_corr %>%
filter(batch_numbers_FA_corr == "batch3") %>%
select(X1) %>%
write_csv(path = 'FA_batch3_corr.csv', col_names = FALSE)
# files with error in script
#read in data
FA_filenames_error <- read_csv('FA_filenames_error.csv', col_names = FALSE)
# assign batch numbers
batch_numbers_FA_error <- c(rep("batch4", 15),
rep("batch5", 10))
# add batch numbers as a column
FA_filenames_error <- FA_filenames_error %>%
cbind(batch_numbers_FA_error)
# write separate csv files
FA_filenames_error %>%
filter(batch_numbers_FA_error == "batch4") %>%
select(X1) %>%
write_csv(path = 'FA_batch4_error.csv', col_names = FALSE)
FA_filenames_error %>%
filter(batch_numbers_FA_error == "batch5") %>%
select(X1) %>%
write_csv(path = 'FA_batch5_error.csv', col_names = FALSE)
library(tidyverse)
# read in the csv file
fn <- read_csv('filenames.csv', col_names = FALSE)
library(readr)
filenames <- read_csv("FixAlign/Expand_start_coordinates/filenames.csv")
View(filenames)
library(readr)
filenames <- read_csv("FixAlign/Expand_start_coordinates/filenames.csv")
View(filenames)
library(tidyverse)
# If in a new folder called Expand_start_coordinates navigate to this destination by importing the file.
filenames <- read_csv("FixAlign/Expand_start_coordinates/filenames.csv")
# split the 1 column into 2
fn <- fn %>%
mutate(ind = rep(c(1, 2),length.out = n())) %>%
group_by(ind) %>%
mutate(id = row_number()) %>%
spread(ind, X1) %>%
select(-id)
library(tidyverse)
# If in a new folder called Expand_start_coordinates navigate to this destination by importing the file.
filenames <- read_csv("FixAlign/Expand_start_coordinates/filenames.csv")
# split the 1 column into 2
fn <- fn %>%
mutate(ind = rep(c(1, 2),length.out = n())) %>%
group_by(ind) %>%
mutate(id = row_number()) %>%
spread(ind, X1) %>%
select(-id)
# If in a new folder called Expand_start_coordinates navigate to this destination by importing the file.
# Call the data fn
fn <- read_csv("FixAlign/Expand_start_coordinates/filenames.csv")
# split the 1 column into 2
fn <- fn %>%
mutate(ind = rep(c(1, 2),length.out = n())) %>%
group_by(ind) %>%
mutate(id = row_number()) %>%
spread(ind, X1) %>%
select(-id)
# split the 1 column into 2
fn <- fn %>%
mutate(ind = rep(c(1, 2),length.out = n())) %>%
group_by(ind) %>%
mutate(id = row_number()) %>%
spread(ind, X1) %>%
select(-id)
rlang::last_error()
# If in a new folder called Expand_start_coordinates navigate to this destination by importing the file.
# Call the data fn
fn <- read_csv("FixAlign/Expand_start_coordinates/filenames.csv")
# split the 1 column into 2
fn <- fn %>%
mutate(ind = rep(c(1, 2),length.out = n())) %>%
group_by(ind) %>%
mutate(id = row_number()) %>%
spread(ind, X1) %>%
select(-id)
# split the 1 column into 2
fn <- fn %>%
mutate(ind = rep(c(1, 2),length.out = n())) %>%
group_by(ind) %>%
mutate(id = row_number()) %>%
spread(ind, X1) %>%
select(-id)
View(fn)
# If in a new folder called Expand_start_coordinates navigate to this destination by importing the file.
# Call the data fn
fn <- read_csv("FixAlign/Expand_start_coordinates/filenames.csv", col_names = FALSE)
# split the 1 column into 2
fn <- fn %>%
mutate(ind = rep(c(1, 2),length.out = n())) %>%
group_by(ind) %>%
mutate(id = row_number()) %>%
spread(ind, X1) %>%
select(-id)
# take just the substrings you need
fn$`1` <- substring(fn$`1`, 5, 10)
fn$`2` <- gsub(".*Desktop","",fn$`2`) # remove the text before 'Desktop' (including 'Desktop')
fn$`2` <- gsub(" using.*","",fn$`2`) # remove the text after 'EDF' (including 'EDF')
write_csv(fn, path = 'filenames.csv')
# IGNORE:
duplicated(fn$`2`)
View(fn)
write_csv(fn, path = 'filenames.csv')
library(tidyverse)
# If in a new folder called Expand_start_coordinates navigate to this destination by importing the file.
# Call the data fn
fn <- read_csv("FixAlign/Expand_start_coordinates/filenames.csv", col_names = FALSE)
# split the 1 column into 2
fn <- fn %>%
mutate(ind = rep(c(1, 2),length.out = n())) %>%
group_by(ind) %>%
mutate(id = row_number()) %>%
spread(ind, X1) %>%
select(-id)
# take just the substrings you need
fn$`1` <- substring(fn$`1`, 5, 10)
fn$`2` <- gsub(".*Desktop","",fn$`2`) # remove the text before 'Desktop' (including 'Desktop')
fn$`2` <- gsub(" using.*","",fn$`2`) # remove the text after 'EDF' (including 'EDF')
write_csv(fn, path = 'filenames.csv')
library(tidyverse)
# If in a new folder called Expand_start_coordinates navigate to this destination by importing the file.
# Call the data fn
fn <- read_csv("FixAlign/Expand_start_coordinates/RAW_asc/filenames.csv", col_names = FALSE)
# split the 1 column into 2
fn <- fn %>%
mutate(ind = rep(c(1, 2),length.out = n())) %>%
group_by(ind) %>%
mutate(id = row_number()) %>%
spread(ind, X1) %>%
select(-id)
# take just the substrings you need
fn$`1` <- substring(fn$`1`, 5, 10)
fn$`2` <- gsub(".*Desktop","",fn$`2`) # remove the text before 'Desktop' (including 'Desktop')
fn$`2` <- gsub(" using.*","",fn$`2`) # remove the text after 'EDF' (including 'EDF')
write_csv(fn, path = 'filenames.csv')
View(fn)
library(tidyverse)
# separate the columns into file and count
FA_detect_script_error <- read_csv("FixAlign/Detecting_script_error_and_lst/detect_script_error.csv", col_names = FALSE) %>%
separate(col = X1, sep = ":", into = c("file", "count"))
# replace asc with DA1 - this is what .lst needs
FA_detect_script_error$file <- str_replace(string = FA_detect_script_error$file,
pattern = "asc",
replacement = "DA1")
# non-problematic trials
FA_detect_script_error %>%
filter(count == 0) %>%
select(file) %>%
write_csv(path = 'FA_filenames_corr.csv', col_names = FALSE)
# problematic trials
FA_detect_script_error %>%
filter(count > 0) %>%
select(file) %>%
write_csv(path = 'FA_filenames_error.csv', col_names = FALSE)
# files with no error in script (correct)
# read in data
FA_filenames_corr <- read_csv('FA_filenames_corr.csv', col_names = FALSE)
# assign batch numbers
batch_numbers_FA_corr <- c(rep("batch1", 15),
rep("batch2", 15),
rep("batch3", 11))
# add batch numbers as a column
FA_filenames_corr <- FA_filenames_corr %>%
cbind(batch_numbers_FA_corr)
# assign batch numbers
batch_numbers_FA_corr <- c(rep("batch1", 20),
rep("batch2", 20),
rep("batch3", 14))
# add batch numbers as a column
FA_filenames_corr <- FA_filenames_corr %>%
cbind(batch_numbers_FA_corr)
# write separate .csv files
FA_filenames_corr %>%
filter(batch_numbers_FA_corr == "batch1") %>%
select(X1) %>%
write_csv(path = 'FA_batch1_corr.csv', col_names = FALSE)
FA_filenames_corr %>%
filter(batch_numbers_FA_corr == "batch2") %>%
select(X1) %>%
write_csv(path = 'FA_batch2_corr.csv', col_names = FALSE)
FA_filenames_corr %>%
filter(batch_numbers_FA_corr == "batch3") %>%
select(X1) %>%
write_csv(path = 'FA_batch3_corr.csv', col_names = FALSE)
# files with error in script
#read in data
FA_filenames_error <- read_csv('FA_filenames_error.csv', col_names = FALSE)
# files with error in script
#read in data
FA_filenames_error <- read_csv('FA_filenames_error.csv', col_names = FALSE)
# assign batch numbers
batch_numbers_FA_error <- c(rep("batch4", 20),
rep("batch5", 12))
# add batch numbers as a column
FA_filenames_error <- FA_filenames_error %>%
cbind(batch_numbers_FA_error)
# assign batch numbers
batch_numbers_FA_error <- c(rep("batch4", 20),
rep("batch5", 11))
# add batch numbers as a column
FA_filenames_error <- FA_filenames_error %>%
cbind(batch_numbers_FA_error)
# write separate csv files
FA_filenames_error %>%
filter(batch_numbers_FA_error == "batch4") %>%
select(X1) %>%
write_csv(path = 'FA_batch4_error.csv', col_names = FALSE)
FA_filenames_error %>%
filter(batch_numbers_FA_error == "batch5") %>%
select(X1) %>%
write_csv(path = 'FA_batch5_error.csv', col_names = FALSE)
