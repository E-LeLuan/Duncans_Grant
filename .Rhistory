##############################
# save_summary
##############################
save_summary <- function(line_ret, sub_file, out_file, n_trials) {
trial_list <- 1:n_trials
for (t in trial_list)
{
slope <- line_ret[[t]]$params[1]
voffset <- line_ret[[t]]$params[2]
sd <- line_ret[[t]]$params[3]
fit <- line_ret[[t]]$fit_measure
n_total_fix <- nrow(line_ret[[t]]$fix_data)
count_table <- table(line_ret[[t]]$fix_data$type)
n_keep <- length(line_ret[[t]]$fix_data$type[line_ret[[t]]$fix_data$type == 'keep'])
n_oob <- length(line_ret[[t]]$fix_data$type[line_ret[[t]]$fix_data$type == 'oob'])
n_amb <- length(line_ret[[t]]$fix_data$type[line_ret[[t]]$fix_data$type == 'amb'])
n_den <- length(line_ret[[t]]$fix_data$type[line_ret[[t]]$fix_data$type == 'den'])
n_nit <- length(line_ret[[t]]$fix_data$type[line_ret[[t]]$fix_data$type == 'nit'])
n_part <- length(line_ret[[t]]$fix_data$type[line_ret[[t]]$fix_data$type == 'part'])
cat(paste(sub_file, t, slope, voffset, sd, fit, n_total_fix, n_keep,
n_oob, n_amb, n_den, n_nit, n_part, '\n',
sep=' '),
file=out_file)
}
}
write_asc_file <- function(line_ret, orig_asc_file_name, n_trials, fa_dir, start_flag, asc_data) {
# Name and open the new asc file
# fa = (f)ix_(a)lign
# Check if directory exists, if not, make
if (!file.exists(fa_dir))
dir.create(fa_dir)
# Make the file name
new_asc_file_name <- strsplit(orig_asc_file_name, '/')
new_asc_file_name <- new_asc_file_name[[1]][length(new_asc_file_name[[1]])]
new_asc_file_name <- gsub('.asc', '_fa.asc', new_asc_file_name)
new_asc_file_name <- paste(fa_dir, '/', new_asc_file_name, sep='')
out_file <- file(new_asc_file_name, 'w')
# Read in the file
f <- readLines(orig_asc_file_name)
# Find all of the EFIX lines after start_flag, put into 1 vector
trial_id_start <- asc_data$trial_id_start
trial_start <- asc_data$trial_start
trial_end <- asc_data$trial_end
efix_lines <- numeric(0)
trial_list <- 1:n_trials
for (t in trial_list) {
trial_data  <- f[trial_id_start[t]:trial_end[t]]
trial_end_fix <- which(grepl('EFIX', trial_data))
efix_lines <- append(efix_lines, trial_end_fix + trial_id_start[t] - 1)
}
# Make a vector of all of the y-values in line_ret
line_ret_y_vals <- numeric(0)
trial_list <- 1:n_trials
for (t in trial_list) {
# Get a single trial of data
line_ret_trial <- line_ret[[t]]
# Mark the y-values for the deleted fixations
line_ret_trial$fix_data$y_new[line_ret_trial$fix_data$type == 'nit'] <- -1000
line_ret_trial$fix_data$y_new[line_ret_trial$fix_data$type == 'part'] <- -1001
line_ret_trial$fix_data$y_new[line_ret_trial$fix_data$type == 'oob'] <- -1002
line_ret_trial$fix_data$y_new[line_ret_trial$fix_data$type == 'amb'] <- -1003
line_ret_trial$fix_data$y_new[line_ret_trial$fix_data$type == 'den'] <- -1004
# Add the y-values onto the end of the vector
line_ret_y_vals <- append(line_ret_y_vals, line_ret_trial$fix_data$y_new)
}
# Go through each fixation
k <- 1
for	(i in efix_lines) {
# Parse out the fixation
fix_data <- gsub('\\s+', ' ', f[i])
fix_data <- strsplit(fix_data, ' ')
# What is the next reformatted y-coordinate
next_y <- line_ret_y_vals[k]
# Change y-coordinate
fix_data[[1]][7] <- next_y
# Overwrite the original line
f[i] <- paste(fix_data[[1]], sep='', collapse='   ')
k <- k + 1
}
# Write the file
#writeLines(f, out_file)
writeLines(f, out_file, sep="\r\n") # Thanks to Brian Dillon for this suggestion
# Close the file
close(out_file)
}
#          28:34,
# 35 - Error in trial_id_start[t]:trial_end[t] : NA/NaN argument
#         36:51,
# 52 - Error in trial_id_start[t]:trial_end[t] : NA/NaN argument
# ((72 x trialid, 67 x trial_result/trial ok, 5 x trial aborted))
#        53:66,
# 67 - replacement has 12 rows, data has 11
# ((68 x trialid, 67 x trial_result/trial ok, 1 x trial aborted))
#       68:83,
#84 - replacement has 101 rows, data has 100)
numbers <- c(1:84)
file <- rep("DBP", length(numbers))
numbers <- sprintf("%02d", numbers)
asc_files <- paste0("RAW_asc/wider_aois/", "w_", file, numbers, ".asc")
xy_bounds <- NULL
start_pts <- rbind(c(200, 324), c(200, 396), c(200, 468), c(200, 540), c(200, 612), c(200, 684))
fix_align(start_pts = start_pts,
asc_files = asc_files,
xy_bounds = xy_bounds,
fa_dir="/Users/duncan/Documents/R analyses/Prediction_Integration/Prediction_Integration/FixAlign")
fix_align(start_pts = start_pts,
asc_files = asc_files,
xy_bounds = xy_bounds,
fa_dir="/Users/elizabethle-luan/Desktop/Duncans_Grant/FixAlign")
#          28:34,
# 35 - Error in trial_id_start[t]:trial_end[t] : NA/NaN argument
#         36:51,
# 52 - Error in trial_id_start[t]:trial_end[t] : NA/NaN argument
# ((72 x trialid, 67 x trial_result/trial ok, 5 x trial aborted))
#        53:66,
# 67 - replacement has 12 rows, data has 11
# ((68 x trialid, 67 x trial_result/trial ok, 1 x trial aborted))
#       68:83,
#84 - replacement has 101 rows, data has 100)
numbers <- c(#1:23,
# 24 - replacement has 63 rows, data has 62
25:84)
file <- rep("DBP", length(numbers))
numbers <- sprintf("%02d", numbers)
asc_files <- paste0("RAW_asc/wider_aois/", "w_", file, numbers, ".asc")
xy_bounds <- NULL
start_pts <- rbind(c(200, 324), c(200, 396), c(200, 468), c(200, 540), c(200, 612), c(200, 684))
fix_align(start_pts = start_pts,
asc_files = asc_files,
xy_bounds = xy_bounds,
fa_dir="/Users/elizabethle-luan/Desktop/Duncans_Grant/FixAlign")
#          28:34,
# 35 - Error in trial_id_start[t]:trial_end[t] : NA/NaN argument
#         36:51,
# 52 - Error in trial_id_start[t]:trial_end[t] : NA/NaN argument
# ((72 x trialid, 67 x trial_result/trial ok, 5 x trial aborted))
#        53:66,
# 67 - replacement has 12 rows, data has 11
# ((68 x trialid, 67 x trial_result/trial ok, 1 x trial aborted))
#       68:83,
#84 - replacement has 101 rows, data has 100)
numbers <- c(#1:23,
# 24 - replacement has 63 rows, data has 62
#25:26,
# 27 - replacement has 56 rows, data has 55
28:84)
file <- rep("DBP", length(numbers))
numbers <- sprintf("%02d", numbers)
asc_files <- paste0("RAW_asc/wider_aois/", "w_", file, numbers, ".asc")
xy_bounds <- NULL
start_pts <- rbind(c(200, 324), c(200, 396), c(200, 468), c(200, 540), c(200, 612), c(200, 684))
fix_align(start_pts = start_pts,
asc_files = asc_files,
xy_bounds = xy_bounds,
fa_dir="/Users/elizabethle-luan/Desktop/Duncans_Grant/FixAlign")
#          28:34,
# 35 - Error in trial_id_start[t]:trial_end[t] : NA/NaN argument
#         36:51,
# 52 - Error in trial_id_start[t]:trial_end[t] : NA/NaN argument
# ((72 x trialid, 67 x trial_result/trial ok, 5 x trial aborted))
#        53:66,
# 67 - replacement has 12 rows, data has 11
# ((68 x trialid, 67 x trial_result/trial ok, 1 x trial aborted))
#       68:83,
#84 - replacement has 101 rows, data has 100)
numbers <- c(#1:23,
# 24 - replacement has 63 rows, data has 62
#25:26,
# 27 - replacement has 56 rows, data has 55
#28:34,
36:84)
file <- rep("DBP", length(numbers))
numbers <- sprintf("%02d", numbers)
asc_files <- paste0("RAW_asc/wider_aois/", "w_", file, numbers, ".asc")
xy_bounds <- NULL
start_pts <- rbind(c(200, 324), c(200, 396), c(200, 468), c(200, 540), c(200, 612), c(200, 684))
fix_align(start_pts = start_pts,
asc_files = asc_files,
xy_bounds = xy_bounds,
fa_dir="/Users/elizabethle-luan/Desktop/Duncans_Grant/FixAlign")
# 67 - replacement has 12 rows, data has 11
# ((68 x trialid, 67 x trial_result/trial ok, 1 x trial aborted))
#       68:83,
#84 - replacement has 101 rows, data has 100)
numbers <- c(#1:23,
# 24 - replacement has 63 rows, data has 62
#25:26,
# 27 - replacement has 56 rows, data has 55
#28:34,
#36:51,
53:84)
file <- rep("DBP", length(numbers))
numbers <- sprintf("%02d", numbers)
asc_files <- paste0("RAW_asc/wider_aois/", "w_", file, numbers, ".asc")
xy_bounds <- NULL
start_pts <- rbind(c(200, 324), c(200, 396), c(200, 468), c(200, 540), c(200, 612), c(200, 684))
fix_align(start_pts = start_pts,
asc_files = asc_files,
xy_bounds = xy_bounds,
fa_dir="/Users/elizabethle-luan/Desktop/Duncans_Grant/FixAlign")
install.packages('reticulate')
library(reticulate)
library(reticulate)
setwd("FixAlign")
source_python("Robodoc.py")
source_python("make_cnt.py")
Y
parameters.txt
source_python("make_cnt.py")
source_python("Robodoc.py")
source_python("Robodoc.py")
parameter.txt
source_python("Robodoc.py")
parameters.txt
source_python("Robodoc.py")
parameters.txt
source_python("Robodoc.py")
parameters.txt
source_python("Robodoc.py")
parameters.txt
source_python("Robodoc.py")
parameters.txt
library(reticulate)
setwd("FixAlign")
source_python("Robodoc.py")
setwd("FixAlign")
setwd("FA_asc_files")
source_python("Robodoc.py")
parameters.txt
source_python("Robodoc.py")
parameters.txt
source_python("make_cnt.py")
source_python("make_cnt.py")
source_python("make_cnt.py")
source_python("make_cnt.py")
corr_ROIs2.del
^
1
2
source_python("make_cnt.py")
error_ROIs2.del
^
1
2
read_csv()
source_python("question_acc.py")
source_python("question_acc.py")
parameters.txt
library(tidyverse)
# FA Processing
# read in the data
# separate the columns into file and count
FA_detect_script_error <- read_csv('detect_script_error.csv', col_names = FALSE) %>%
separate(col = X1, sep = ":", into = c("file", "count"))
# replace asc with DA1 - this is what .lst needs
FA_detect_script_error$file <- str_replace(string = FA_detect_script_error$file,
pattern = "asc",
replacement = "DA1")
# non-problematic trials
FA_detect_script_error %>%
filter(count == 0) %>%
select(file) %>%
write_csv(path = 'FA_filenames_corr.csv', col_names = FALSE)
# problematic trials
FA_detect_script_error %>%
filter(count > 0) %>%
select(file) %>%
write_csv(path = 'FA_filenames_error.csv', col_names = FALSE)
# files with no error in script (correct)
# read in data
FA_filenames_corr <- read_csv('FA_filenames_corr.csv', col_names = FALSE) #54 obs. 20 20 14
# assign batch numbers
batch_numbers_FA_corr <- c(rep("batch1", 20),
rep("batch2", 20),
rep("batch3", 14))
# add batch numbers as a column
FA_filenames_corr <- FA_filenames_corr %>%
cbind(batch_numbers_FA_corr)
# write separate .csv files
FA_filenames_corr %>%
filter(batch_numbers_FA_corr == "batch1") %>%
select(X1) %>%
# write separate .csv files
FA_filenames_corr %>%
filter(batch_numbers_FA_corr == "batch1") %>%
select(X1) %>%
write_csv(path = 'FA_batch1_corr.csv', col_names = FALSE)
# write separate .csv files
FA_filenames_corr %>%
filter(batch_numbers_FA_corr == "batch1") %>%
select(X1) %>%
write_csv(path = 'FA_batch1_corr.csv', col_names = FALSE)
#FA_filenames_corr %>%
filter(batch_numbers_FA_corr == "batch2") %>%
select(X1) %>%
write_csv(path = 'FA_batch2_corr.csv', col_names = FALSE)
#FA_filenames_corr %>%
filter(batch_numbers_FA_corr == "batch3") %>%
select(X1) %>%
write_csv(path = 'FA_batch3_corr.csv', col_names = FALSE)
# files with error in script
#read in data
FA_filenames_error <- read_csv('FA_filenames_error.csv', col_names = FALSE) #36 obs. 20 16
# assign batch numbers
batch_numbers_FA_error <- c(rep("batch4", 20),
rep("batch5", 16))
# add batch numbers as a column
FA_filenames_error <- FA_filenames_error %>%
cbind(batch_numbers_FA_error)
# assign batch numbers
batch_numbers_FA_error <- c(rep("batch4", 20),
rep("batch5", 16))
# add batch numbers as a column
FA_filenames_error <- FA_filenames_error %>%
cbind(batch_numbers_FA_error)
library(tidyverse)
# FA Processing
# read in the data
# separate the columns into file and count
FA_detect_script_error <- read_csv('detect_script_error.csv', col_names = FALSE) %>%
separate(col = X1, sep = ":", into = c("file", "count"))
# replace asc with DA1 - this is what .lst needs
FA_detect_script_error$file <- str_replace(string = FA_detect_script_error$file,
pattern = "asc",
replacement = "DA1")
# non-problematic trials
FA_detect_script_error %>%
filter(count == 0) %>%
select(file) %>%
write_csv(path = 'FA_filenames_corr.csv', col_names = FALSE)
# problematic trials
FA_detect_script_error %>%
filter(count > 0) %>%
select(file) %>%
write_csv(path = 'FA_filenames_error.csv', col_names = FALSE)
# files with no error in script (correct)
# read in data
FA_filenames_corr <- read_csv('FA_filenames_corr.csv', col_names = FALSE) #54 obs. 20 20 14
# assign batch numbers
batch_numbers_FA_corr <- c(rep("batch1", 20),
rep("batch2", 20),
rep("batch3", 14))
# add batch numbers as a column
FA_filenames_corr <- FA_filenames_corr %>%
cbind(batch_numbers_FA_corr)
# write separate .csv files
FA_filenames_corr %>%
filter(batch_numbers_FA_corr == "batch1") %>%
select(X1) %>%
write_csv(path = 'FA_batch1_corr.csv', col_names = FALSE)
#FA_filenames_corr %>%
filter(batch_numbers_FA_corr == "batch2") %>%
select(X1) %>%
write_csv(path = 'FA_batch2_corr.csv', col_names = FALSE)
#FA_filenames_corr %>%
FA_filenames_corr %>%
filter(batch_numbers_FA_corr == "batch2") %>%
select(X1) %>%
write_csv(path = 'FA_batch2_corr.csv', col_names = FALSE)
#FA_filenames_corr %>%
filter(batch_numbers_FA_corr == "batch3") %>%
select(X1) %>%
write_csv(path = 'FA_batch3_corr.csv', col_names = FALSE)
library(tidyverse)
# FA Processing
# read in the data
# separate the columns into file and count
FA_detect_script_error <- read_csv('detect_script_error.csv', col_names = FALSE) %>%
separate(col = X1, sep = ":", into = c("file", "count"))
# replace asc with DA1 - this is what .lst needs
FA_detect_script_error$file <- str_replace(string = FA_detect_script_error$file,
pattern = "asc",
replacement = "DA1")
# non-problematic trials
FA_detect_script_error %>%
filter(count == 0) %>%
select(file) %>%
write_csv(path = 'FA_filenames_corr.csv', col_names = FALSE)
# problematic trials
FA_detect_script_error %>%
filter(count > 0) %>%
select(file) %>%
write_csv(path = 'FA_filenames_error.csv', col_names = FALSE)
# files with no error in script (correct)
# read in data
FA_filenames_corr <- read_csv('FA_filenames_corr.csv', col_names = FALSE) #54 obs. 20 20 14
# assign batch numbers
batch_numbers_FA_corr <- c(rep("batch1", 20),
rep("batch2", 20),
rep("batch3", 14))
# add batch numbers as a column
FA_filenames_corr <- FA_filenames_corr %>%
cbind(batch_numbers_FA_corr)
# write separate .csv files
FA_filenames_corr %>%
filter(batch_numbers_FA_corr == "batch1") %>%
select(X1) %>%
write_csv(path = 'FA_batch1_corr.csv', col_names = FALSE)
FA_filenames_corr %>%
filter(batch_numbers_FA_corr == "batch2") %>%
select(X1) %>%
write_csv(path = 'FA_batch2_corr.csv', col_names = FALSE)
FA_filenames_corr %>%
filter(batch_numbers_FA_corr == "batch3") %>%
select(X1) %>%
write_csv(path = 'FA_batch3_corr.csv', col_names = FALSE)
# files with error in script
#read in data
FA_filenames_error <- read_csv('FA_filenames_error.csv', col_names = FALSE) #36 obs. 20 16
# assign batch numbers
batch_numbers_FA_error <- c(rep("batch4", 20),
rep("batch5", 16))
# add batch numbers as a column
FA_filenames_error <- FA_filenames_error %>%
cbind(batch_numbers_FA_error)
# add batch numbers as a column
FA_filenames_error <- FA_filenames_error %>%
cbind(batch_numbers_FA_error)
# write separate csv files
FA_filenames_error %>%
filter(batch_numbers_FA_error == "batch4") %>%
select(X1) %>%
#write_csv(path = 'FA_batch4_error.csv', col_names = FALSE)
#FA_filenames_error %>%
filter(batch_numbers_FA_error == "batch5") %>%
select(X1) %>%
write_csv(path = 'FA_batch5_error.csv', col_names = FALSE)
# FA Processing
# read in the data
# separate the columns into file and count
FA_detect_script_error <- read_csv('detect_script_error.csv', col_names = FALSE) %>%
separate(col = X1, sep = ":", into = c("file", "count"))
# replace asc with DA1 - this is what .lst needs
FA_detect_script_error$file <- str_replace(string = FA_detect_script_error$file,
pattern = "asc",
replacement = "DA1")
# non-problematic trials
FA_detect_script_error %>%
filter(count == 0) %>%
select(file) %>%
write_csv(path = 'FA_filenames_corr.csv', col_names = FALSE)
# problematic trials
FA_detect_script_error %>%
filter(count > 0) %>%
select(file) %>%
write_csv(path = 'FA_filenames_error.csv', col_names = FALSE)
# files with no error in script (correct)
# read in data
FA_filenames_corr <- read_csv('FA_filenames_corr.csv', col_names = FALSE) #54 obs. 20 20 14
# assign batch numbers
batch_numbers_FA_corr <- c(rep("batch1", 20),
rep("batch2", 20),
rep("batch3", 14))
# add batch numbers as a column
FA_filenames_corr <- FA_filenames_corr %>%
cbind(batch_numbers_FA_corr)
# write separate .csv files
FA_filenames_corr %>%
filter(batch_numbers_FA_corr == "batch1") %>%
select(X1) %>%
write_csv(path = 'FA_batch1_corr.csv', col_names = FALSE)
FA_filenames_corr %>%
filter(batch_numbers_FA_corr == "batch2") %>%
select(X1) %>%
write_csv(path = 'FA_batch2_corr.csv', col_names = FALSE)
FA_filenames_corr %>%
filter(batch_numbers_FA_corr == "batch3") %>%
select(X1) %>%
write_csv(path = 'FA_batch3_corr.csv', col_names = FALSE)
# files with error in script
#read in data
FA_filenames_error <- read_csv('FA_filenames_error.csv', col_names = FALSE) #36 obs. 20 16
# assign batch numbers
batch_numbers_FA_error <- c(rep("batch4", 20),
rep("batch5", 16))
# add batch numbers as a column
FA_filenames_error <- FA_filenames_error %>%
cbind(batch_numbers_FA_error)
# assign batch numbers
batch_numbers_FA_error <- c(rep("batch4", 20),
rep("batch5", 11))
# add batch numbers as a column
FA_filenames_error <- FA_filenames_error %>%
cbind(batch_numbers_FA_error)
# write separate csv files
FA_filenames_error %>%
filter(batch_numbers_FA_error == "batch4") %>%
select(X1) %>%
#write_csv(path = 'FA_batch4_error.csv', col_names = FALSE)
#FA_filenames_error %>%
filter(batch_numbers_FA_error == "batch5") %>%
select(X1) %>%
write_csv(path = 'FA_batch5_error.csv', col_names = FALSE)
# write separate csv files
FA_filenames_error %>%
filter(batch_numbers_FA_error == "batch4") %>%
select(X1) %>%
write_csv(path = 'FA_batch4_error.csv', col_names = FALSE)
FA_filenames_error %>%
filter(batch_numbers_FA_error == "batch5") %>%
select(X1) %>%
write_csv(path = 'FA_batch5_error.csv', col_names = FALSE)
# first create a csv file
write.csv(DA1_files)
# first create a csv file
write.list(DA1_files)
# first create a csv file
file.rename('w_DBP01_fa.da1', 'DBP01_fa.da1')
# first create a csv file
da1_files %>% file.rename('w_DBP01_fa.da1', 'DBP01_fa.da1')
# first create a csv file
da1_files %<% file.rename('w_DBP01_fa.da1', 'DBP01_fa.da1')
