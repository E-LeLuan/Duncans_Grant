require(psych)
require(readr)
require(lme4)
require(ggplot2)
require(lmerTest)
require(emmeans)

#First pass data loaded below
library(readr)
library(readr)
FPs <- read_csv("Libby a/First pass/FPs.csv")
View(FPs)
library(lmerTest)

# Run the analysis 
FPs$Predict <- as.factor(FPs$Predict)
modelfp4 <- lmer(R4 ~ Predict + (1 + Predict | P.s) + (1 + Predict | Item), data = FPs, REML = TRUE)
summary (modelfp4)
anova(modelfp4)
emmeans(modelfp4, pairwise ~ Predict, adjust = "none")
describeBy(FPs$R4, group = FPs$Predict)
model.null <- lmer(R4 ~ (1 + Predict|P.s) + (1 + Predict|Item) data =FPs, REML = TRUE)
anova(model.null, modelfp4)
hist(R4$Predict)
describeBy(FPs$R4, group = FPs$Predict)
hist(FPs$R4, group = FPs$Predict)
hist(FPs$R4, breaks = 50)
data %>% group_by(condition) %>% summarise(n(), mean(RT), sd(RT))
hist(FPs$R4, breaks = 50)

# Load data 
library(readr)
FPs <- read_csv("Libby a/First pass/FPs.csv")
View(FPs)

FPs <- filter(FPs, R4 > 0)

pred_fac <- filter(FPs, Cond == 1)
pred_unfac <- filter(FPs, Cond == 2)

hist(pred_fac$R4, breaks = 100)
hist(pred_unfac$R4, breaks = 100)
hist(FPs$R4, breaks = 100)

# 148 participants
# 32 items
# Condition has 2 levels
# 4 Covariates

subject <- 1:148
item <- 1:32
#cond <- c("predict_fac", "predict_unfac")

data <- expand.grid(subject, item)

condition <- c(rep(c(rep("predict_fac", 74), rep("predict_unfac", 74)), times = 16), 
               rep(c(rep("predict_unfac", 74), rep("predict_fac", 74)), times = 16))


data <- cbind(data, condition)

colnames(data) <- c("subject", "item", "condition")

#View(filter(data, subject == 1))
#View(filter(data, item == 1))

data <- data %>% arrange(desc(data$condition))

#data$RT <- c(rnorm(2368, 1200, 100), rnorm(2368, 500, 100))

#data %>% group_by(condition) %>% summarise(n(), mean(RT), sd(RT))

# Below is incorrect as we do not get the mean we're after
#data$RT <- c(rexGAUS(2368, mu = 1110, sigma = 95, nu = 100), (rexGAUS(2368, mu = 999, sigma = 65, nu = 100)))
#hist(data$RT, breaks = 50)
#summary(mean(data$RT))

library(retimes)


# First of all prediction facilitated ####
mexgauss(pred_fac$R4)

rt <- pred_fac$R4

# Another possibility - read in real data and map to the rt variable ####
# The mexgauss function will generate the parameter estimates 
# the pred_fac is what we renamed our predict allowed condtion form the pilot data FPs. Here we are getting the parameter estimates from this sample in just the prediction allowed condition.

mu <- mexgauss(pred_fac$R4)[1]
summary(mu)
sigma <- mexgauss(pred_fac$R4)[2]
summary(sigma)
nu <- mexgauss(pred_fac$R4)[3]
summary(nu)

# here we have parameter estimates for both prediction facilitated in red and prediction unfacilitated in #grey
mu <- 471 #536 
sigma <- 254 #308
nu <- 536 #574
samples <- 2368

#if you want the overall parameter estimates accross both conditions you could do as follows...
#mu <- mexgauss(FPs$R4)[1]
#summary(mu)
#sigma <- mexgauss(FPs$R4)[2]
#summary(sigma)
#nu <- mexgauss(FPs$R4)[3]
#summary(nu)
library(gamlss)

set.seed(1234)
simulated_rt <- rexGAUS(samples, mu, sigma, nu)
hist(simulated_rt, breaks = 2368)

sim_fac <- (simulated_rt)

sim_fac[sim_fac$value < 100,]$value <- 100

hist(sim_fac, breaks = 100)



# Now prediction unfacilitated ####
mexgauss(pred_unfac$R4)

rt <- pred_unfac$R4

# Another possibility - read in real data and map to the rt variable ####
# The mexgauss function will generate the parameter estimates

mu <- 540
sigma <- 302
nu <- 574
samples <- 2368

set.seed(1234)
simulated_rt <- rexGAUS(samples, mu, sigma, nu)
hist(simulated_rt, breaks = 2368)

sim_unfac <- (simulated_rt)

sim_unfac[sim_unfac$value < 100,]$value <- 100

hist(sim_unfac, breaks = 100)

simulated_rt <- c(sim_fac, sim_unfac)
data$rt <- simulated_rt


library(lme4)

mean(sim_fac$value)
mean(sim_unfac$value)
sd(sim_fac$value)
sd(sim_unfac$value)

summary(sim_fac)


model_sim <- lmer(RT ~ condition + (1 + condition|subject) + (1 + condition|item), data, REML = TRUE)
summary(model_sim)

# EQ data added
library(readr)
library(Hmisc)
library(readr)
library(readr)
EQ_real_data <- read_csv("EQ real data.csv", 
                         col_types = cols(EQ_score = col_number()))
View(EQ_real_data)
View(EQ_real_data)
(EQ_real_data)
summary(EQ_real_data)
is.numeric(EQ_real_data$EQ_score)
hist(EQ_real_data$EQ_score, breaks = 10)

mu1 <- mexgauss(EQ_real_data$EQ_score)[1]
summary(mu1)
sigma1 <- mexgauss(EQ_real_data$EQ_score)[2]
summary(sigma1)
nu1 <- mexgauss(EQ_real_data$EQ_score)[3]
summary(nu1)
simulated_EQ <- rexgauss(148, mu1, sigma1, nu1)
subject <- 1:148
dataEQ <- as.tibble(cbind(simulated_EQ, subject))

?inner_join
alldata <- inner_join(data, dataEQ, by = "subject")

hist(simulated_EQ, breaks = 100)

EQ = simulated_EQ

library(tidyverse)

model_alldata <- lmer(rt ~ condition + simulated_EQ + (1 + condition|subject) + 
                        (1 + condition|item), alldata, REML = TRUE)
summary(model_alldata)

#AQ data added
library(readr)
library(readr)
AQ <- read_csv("AQ.csv", col_types = cols(AQ = col_number()))
View(AQ)
hist(AQ$EQ_score, breaks = 10)




